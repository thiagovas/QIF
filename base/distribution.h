#ifndef _base_distribution_h
#define _base_distribution_h
#include <algorithm>
#include <vector>

namespace base {

  class Distribution {
    public:
      // --------------------------------------------------------------------------
      /// @Brief  Creates a new probability distribution.
      ///
      /// @Param size The number of elements represented by this distribution.
      /// @Param uniform Whether this is a uniform distribution or not.
      ///                If false, then a random distribution will be generated.
      // ----------------------------------------------------------------------------
      Distribution(int size, bool uniform=true);


      // --------------------------------------------------------------------------
      /// @Brief  Build the object from a previous distribution.
      ///
      /// @Param dist A vector of doubles representing a probability distribution.
      /// @Param base_norm An optional parameter, in case the distribution was
      ///                  generated by random fractions with a common denominator,
      ///                  [base_norm] is the common denominator.
      // ----------------------------------------------------------------------------
      Distribution(const std::vector<double>& dist, long long base_norm=-1);
      

      // --------------------------------------------------------------------------
      /// @Brief  Getter to a vector<double> representing the probability
      ///         distribution.
      ///
      /// @Returns   Returns a vector<double> representing the probability
      ///            distribution.
      // ----------------------------------------------------------------------------
      const std::vector<double>& pdist() const { return this->pdist_; }


      // --------------------------------------------------------------------------
      /// @Brief  Generates a new random distribution.
      ///
      /// @Param size The size of the probability distribution.
      ///
      /// @Returns   Returns a Distribution object.
      // ----------------------------------------------------------------------------
      static Distribution GenerateRandomDistribution(int size);
      

      // --------------------------------------------------------------------------
      /// @Brief  Returns a uniform probability distribution with [size] items.
      ///
      /// @Param size The size of the probability distribution.
      ///
      /// @Returns   Returns a Distribution object.
      // ----------------------------------------------------------------------------
      static Distribution GenerateUniformDistribution(int size);


      // --------------------------------------------------------------------------
      /// @Brief  Returns p(x)
      ///
      /// @Param x The index of the element you're searching p(x) for.
      ///
      /// @Returns   A double, the probability of getting x.
      // ----------------------------------------------------------------------------
      double operator[](unsigned x);


      // --------------------------------------------------------------------------
      /// @Brief  Creates a new random distribution, maintaining the same size.
      // ----------------------------------------------------------------------------
      void Randomize();


      // --------------------------------------------------------------------------
      /// @Brief  Shannon entropy of this distribution. Calculated using log2.
      ///
      /// @Returns   A double. The Shannon Entropy.
      // ----------------------------------------------------------------------------
      double ShannonEntropy() const;


      // --------------------------------------------------------------------------
      /// @Brief  Guessing entropy.
      ///
      /// @Returns   A double. The guessing entropy of this distribution.
      // ----------------------------------------------------------------------------
      double GuessingEntropy() const;


      // --------------------------------------------------------------------------
      /// @Brief  Returns if the received vector represents a probability
      ///         distribution.
      ///
      /// @Param dist A vector<double>.
      ///
      /// @Returns   True if the [dist] represents a probability distribution,
      ///            False otherwise.
      // ----------------------------------------------------------------------------
      bool isDistribution(const std::vector<double> &dist);
      
    private:
      
      // The vector that keeps the distribution.
      std::vector<double> pdist_;
      
      // The common denominator used to generate this probability distribution.
      long long base_norm_;


      // Epsilon value used by this class to make comparisons between floats.
      const double eps = 1e-6;


      // --------------------------------------------------------------------------
      /// @Brief  Generates a new random distribution.
      ///
      /// @Param size The size of the newly generated probability distribution.
      /// @Param vdist A vector<double> which will be filled with the distribution.
      /// @Param base_norm The common denominator used to generate this probability
      ///                  distribution.
      // ----------------------------------------------------------------------------
      static void GenerateRandomDistribution(int size, std::vector<double>& vdist, long long& base_norm);


      // --------------------------------------------------------------------------
      /// @Brief  Generates a uniform distribution.
      ///
      /// @Param size The number of elements of the probability distribution.
      /// @Param vdist A vector<double> which will be filled with the distribution.
      /// @Param base_norm The common denominator used to generate this probability
      ///                  distribution, [base_norm] will always be 1/size.
      // ----------------------------------------------------------------------------
      static void GenerateUniformDistribution(int size, std::vector<double>& vdist, long long& base_norm);
  };

} // namespace base

#endif
