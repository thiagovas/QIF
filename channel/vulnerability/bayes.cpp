#include <algorithm>

#include "bayes.h"


namespace channel {
namespace vulnerability {

double Bayes::VulnerabilityPrior(const Channel& channel) const {
  double vulnerability = 0;
  for(int i = 0; i < channel.n_in(); i++) {
    vulnerability = std::max(vulnerability, channel.prior_distribution()[i]);
  }
  return vulnerability;
}

double Bayes::VulnerabilityOut(const Channel& channel) const {
  double vulnerability = 0;
  for(int i = 0; i < channel.n_out(); i++) {
    vulnerability = std::max(vulnerability, channel.out_distribution()[i]);
  }
  return vulnerability;
}

double Bayes::VulnerabilityPosterior(const Channel& channel) const {
  double vulnerability = 0;
  for(int i = 0; i < channel.n_out(); i++) {
    vulnerability += channel.max_poutput()[i];
  }
  return vulnerability;
}

double Bayes::VulnerabilityReversePosterior(const Channel& channel) const {
  double vulnerability = 0;
  for(int i = 0; i < channel.n_in(); i++) {
    vulnerability += channel.max_pinput()[i];
  }
  return vulnerability;
}


} // namespace vulnerability
} // namespace channel
